
def get_matching_rules(endpoint) -> List[Rule]:
    rules: List[Rule] = current_app.url_map._rules
    matched_rules = []

    for rule in rules:
        if rule.endpoint == endpoint:
            matched_rules.append(rule)
    return matched_rules


def _parse_decorated_data():
    parsed_data = {"paths": {}}
    for endpoint, value in data.get("paths", {}).items():
        rules = get_matching_rules(endpoint)

        for rule in rules:
            path = rule_to_path(rule)
            allowed_methods = rule.methods
            registered_methods = [
                method.lower()
                for method in data.get("paths", {}).get(endpoint, {}).keys()
            ]
            if "*" in registered_methods:
                registered_methods = [
                    method.lower() for method in allowed_methods
                ]
            for method in registered_methods:
                parsed_data.setdefault("paths", {}).setdefault(
                    path, {}
                ).setdefault(method, {})
                parsed_data["paths"][path][method] = data.get("paths", {}).get(
                    endpoint, {}
                ).get(method, {}) or data.get("paths", {}).get(
                    endpoint, {}
                ).get(
                    "*", {}
                )
    return parsed_data

